if (isModule) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

def cfg = rootProject.ext.android
def appId = rootProject.ext.appId
def dep = rootProject.ext.dependencies

android {
    compileSdkVersion cfg.compileSdkVersion

    defaultConfig {
        if (!isModule) { //组件模式下
            applicationId appId['module2']
        }
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName

        buildConfigField("boolean", "isModule", String.valueOf(isModule))

        // 用于区分是组件还是apk
        sourceSets {
            main {
                if (!isModule) {//在组件模式下，使用不同的manifest文件
                    manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
                } else {
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation dep['appcompat-v7']
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //每一个module都要引用router编译
    annotationProcessor project(':routercompiler')

    //服务调用方只依赖于服务提供商的暴露组件，这里是依赖于routermodule1
    implementation project(':routerbase')
}
